package Lesson6;

//Смоделировать банковский счет, доступ к которому часто прерывается из-за плохой сети.
//Задан интерфейс банковского счет (Account) с единственным методом снятия денег (withdraw).
//Во время снятия может произойти одна из исключительных ситуаций (AccountException):
//Недостаточно денег на счету (NotEnoughFundsException).
//Срок действия счета истек (AccountExpiredException).
//Ошибка соединения (AccountConnectionException).
//
//Написать класс ConnectionRetryAccount, который оборачивает “неблагонадежный” объект типа Account (принимается в конструкторе). ConnectionRetryAccount реализует интерфейс Account и работает по принципу декоратора (см. шаблон классов). ConnectionRetryAccount обладает следующим поведением:
//При вызове withdraw у объекта ConnectionRetryAccount вызывается withdraw у внутреннего Account; если произошла ошибка соединения, вызывается метод withdraw еще раз.
//Количество повторов не должно превышать параметра retries, который задается в конструкторе. Если и на последней попытке возникла ошибка соединения, просто перебросить (или проигнорировать).
//Если снятие денег на одной из попыток произошло успешно или произошла ошибка, не связанная с соединением, повторно вызывать withdraw не нужно.
//
//Для тестирования написать класс RandomAccount, реализующий Account, который случайным образом или производит снятие успешно, или возникает одна из исключительных ситуаций.
//Конструктор RandomAccount принимает 3 параметра:
//Вероятность того, что будет ошибка NotEnoughFundsException.
//Вероятность того, что будет ошибка AccountExpiredException.
//Вероятность того, что будет ошибка AccountConnectionException.
//Например, для конструктора new RandomAccount(0.2, 0.3, 0.4) вероятность NotEnoughFundsException - 20%, AccountExpiredException - 30%, AccountConnectionException - 40%, успех - 10%.
//Алгоритм генерации события для примера выше:
//Сгенерировать псевдослучайное число n в диапазоне [0..1] (можно использовать Math.random()).
//Если 0 <= n < 0.2, бросить NotEnoughFundsException.
//Если 0.2 <= n < 0.5, бросить AccountExpiredException.
//Если 0.5 <= n < 0.9, бросить AccountConnectionException.
//Иначе (0.9 <= n <= 1), ничего не делать (сигнал успеха).
//
//Написать AccountRunner, демонстрирующий работу предыдущих классов.
//
//Реализовывать реальный Account, работающий с платежной системой, не нужно.


public interface Account {
    void withdraw(long money) throws AccountException;
}
